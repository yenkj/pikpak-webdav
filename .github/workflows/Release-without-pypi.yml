name: Release For All But Pypi
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.0.1'
jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64-apple-darwin
          args: --release --out dist --strip
      - name: Install built wheel - x86_64
        run: |
          pip install pikpak-webdav --no-index --find-links dist --force-reinstall
          pikpak-webdav --help
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --strip 
      - name: Install built wheel - universal2
        run: |
          pip install pikpak-webdav --no-index --find-links dist --force-reinstall
          pikpak-webdav --help
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: apple-darwin-bin
          path: target/release/pikpak-webdav
          if-no-files-found: error
      - name: Archive binary
        run: |
          cd target/release
          tar czvf pikpak-webdav-${{ github.event.inputs.tag }}.apple-darwin.tar.gz pikpak-webdav
          shasum -a 256 pikpak-webdav-${{ github.event.inputs.tag }}.apple-darwin.tar.gz > pikpak-webdav-${{ github.event.inputs.tag }}.apple-darwin.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/pikpak-webdav*.tar.gz
          file_glob: true
          overwrite: true
          tag: "refs/tags/${{ github.event.inputs.tag }}"
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - arch: x64
            target: x86_64-pc-windows-msvc
          - arch: x86
            target: i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: ${{ matrix.platform.arch }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --strip
      - name: Install built wheel
        run: |
          pip install pikpak-webdav --no-index --find-links dist --force-reinstall
          pikpak-webdav --help
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.platform.arch }}-bin
          path: target/${{ matrix.platform.target }}/release/pikpak-webdav.exe
          if-no-files-found: error
      # - name: Get tag
      #   if: "startsWith(github.ref, 'refs/tags/')"
      #   id: tag
      #   uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          7z a pikpak-webdav.zip pikpak-webdav.exe
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: pikpak-webdav-${{ github.event.inputs.tag }}.windows-${{ matrix.platform.arch }}.zip
          file: target/${{ matrix.platform.target }}/release/pikpak-webdav.zip
          overwrite: true
          tag: "refs/tags/${{ github.event.inputs.tag }}"
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl", wheel: true },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", wheel: true },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", wheel: true },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", wheel: true },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi", wheel: false },
          { target: "arm-unknown-linux-musleabihf", image_tag: "arm-musleabihf", wheel: false },
          { target: "arm-unknown-linux-musleabi", image_tag: "arm-musleabi", wheel: false },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v2
      - name: Build wheels - manylinux
        uses: messense/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --release -o dist --strip
      - name: Build wheels - musllinux
        if: matrix.platform.wheel
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_1
          container: off
          args: --release --out dist --strip
      - name: Upload wheels
        if: matrix.platform.wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Upx compress binary
        uses: crazy-max/ghaction-upx@v1
        with:
          version: latest
          files: target/${{ matrix.platform.target }}/release/pikpak-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/pikpak-webdav
          if-no-files-found: error
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf pikpak-webdav-${{ github.event.inputs.tag }}.${{ matrix.platform.target }}.tar.gz pikpak-webdav
          shasum -a 256 pikpak-webdav-${{ github.event.inputs.tag }}.${{ matrix.platform.target }}.tar.gz > pikpak-webdav-${{ github.event.inputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/release/pikpak-webdav*.tar.gz*
          file_glob: true
          overwrite: true
          tag: "refs/tags/${{ github.event.inputs.tag }}"
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ linux ]
    environment: Docker Hub
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: x86_64-unknown-linux-musl-bin
      - run: |
          chmod a+x pikpak-webdav
          mv pikpak-webdav pikpak-webdav-amd64
      - uses: actions/download-artifact@v2
        with:
          name: i686-unknown-linux-musl-bin
      - run: |
          chmod a+x pikpak-webdav
          mv pikpak-webdav pikpak-webdav-386
      - uses: actions/download-artifact@v2
        with:
          name: aarch64-unknown-linux-musl-bin
      - run: |
          chmod a+x pikpak-webdav
          mv pikpak-webdav pikpak-webdav-arm64
      - uses: actions/download-artifact@v2
        with:
          name: armv7-unknown-linux-musleabihf-bin
      - run: |
          chmod a+x pikpak-webdav
          mv pikpak-webdav pikpak-webdav-armv7
      - uses: actions/download-artifact@v2
        with:
          name: arm-unknown-linux-musleabihf-bin
      - run: |
          chmod a+x pikpak-webdav
          mv pikpak-webdav pikpak-webdav-armv6
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ykxvk8yl5l/pikpak-webdav
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Setup QEMU
        uses: dbhi/qus/action@main
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USER}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
          tags: ykxvk8yl5l/pikpak-webdav:latest
          labels: ${{ steps.meta.outputs.labels }}       
  
